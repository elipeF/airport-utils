name: Maintain Bot PRs

on:
  pull_request_target:
    types: [opened, reopened, synchronize, ready_for_review]
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: bot-pr-maintenance
  cancel-in-progress: false

env:
  BOT_TOKEN: ${{ secrets.BOT_MAINTAINER_TOKEN != '' && secrets.BOT_MAINTAINER_TOKEN || secrets.GITHUB_TOKEN }}
  APPROVED_BOTS: '["dependabot[bot]","github-actions[bot]"]'

jobs:
  maintain:
    runs-on: ubuntu-latest
    steps:
      - name: Determine PR number (if event is a PR)
        id: pr
        run: |
          if [ "${{ github.event.pull_request.number }}" != "" ]; then
            echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Update the PR branch to latest base
        if: ${{ steps.pr.outputs.number != '' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.BOT_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const APPROVED_BOTS = JSON.parse(process.env.APPROVED_BOTS);

            async function updateOne(number) {
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
              if (!APPROVED_BOTS.includes(pr.user.login) || pr.state !== 'open') return;
              try {
                await github.rest.pulls.updateBranch({ owner, repo, pull_number: number });
                core.info(`Updated branch for PR #${number}`);
              } catch (e) {
                core.info(`UpdateBranch skipped for PR #${number}: ${e.message}`);
              }
            }

            if (context.eventName === 'pull_request_target' && context.payload.pull_request) {
              await updateOne(context.payload.pull_request.number);
            } else {
              const all = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', per_page: 100 });
              for (const pr of all.filter(p => APPROVED_BOTS.includes(p.user.login))) {
                await updateOne(pr.number);
              }
            }

      - name: Auto-approve bot PR(s) (skip if reviewer == author or already approved)
        if: ${{ steps.pr.outputs.number != '' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.BOT_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const APPROVED_BOTS = JSON.parse(process.env.APPROVED_BOTS);
            const myLogin = process.env.GITHUB_ACTOR.toLowerCase();

            async function approveOne(number) {
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
              const author = pr.user.login.toLowerCase();
              if (!APPROVED_BOTS.includes(pr.user.login) || pr.state !== 'open') return;

              // Skip if reviewer == author
              if (author === myLogin) {
                core.info(`Skipping PR #${number} - reviewer (${myLogin}) is the author.`);
                return;
              }

              // Skip if already approved by this reviewer
              const { data: reviews } = await github.rest.pulls.listReviews({ owner, repo, pull_number: number });
              const hasApproval = reviews.some(r =>
                r.user?.login?.toLowerCase() === myLogin &&
                r.state?.toLowerCase() === 'approved'
              );
              if (hasApproval) {
                core.info(`Skipping PR #${number} - already approved by ${myLogin}.`);
                return;
              }

              await github.rest.pulls.createReview({
                owner, repo, pull_number: number,
                event: 'APPROVE'
              });
              core.info(`Approved PR #${number} from ${pr.user.login}`);
            }

            if (context.eventName === 'pull_request_target' && context.payload.pull_request) {
              await approveOne(context.payload.pull_request.number);
            } else {
              const all = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', per_page: 100 });
              for (const pr of all.filter(p => APPROVED_BOTS.includes(p.user.login))) {
                await approveOne(pr.number);
              }
            }

      - name: Enable auto-merge (squash)
        if: ${{ steps.pr.outputs.number != '' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ env.BOT_TOKEN }}
          pull-request-number: ${{ steps.pr.outputs.number }}
          merge-method: squash
